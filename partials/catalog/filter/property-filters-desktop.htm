{% for obProperty in obPropertyList %}
    {% if obProperty.hasValue() %}
    <details
        open
        class="_filter-details js-details"
        id = "{{obProperty.id}}"
        data-property = "property[{{obProperty.id}}]"
    >
        <summary class="js-accordion-summary hover:!no-underline text-base font-medium cursor-pointer mb-3 link link-blue w-full">
            {{ obProperty.filter_name }} {% if obProperty.measure.isNotEmpty() %}({{ obProperty.measure.name }}){% endif %}
        </summary>
        <div class="flex _shopaholic-filter-wrapper js-accordion-content {{obProperty.filter_type == 'between' ? 'mb-4' : ''}}" data-filter-type="{{ obProperty.filter_type }}" data-property-id="{{ obProperty.id }}">
            {% if obProperty.filter_type == 'between' %}
                <div class="_filter-range flex" data-filter-id="{{ obProperty.id }}">
                    <fieldset class="me-3">
                        <legend class="sr-only">{{ obProperty.filter_name }}&nbsp;{{ 'filter_min'|_ }}</legend>
                        {% partial 'form/input'
                            labelText = 'filter_min'|_
                            inputClasses = '_min appearance-none quantity_input'
                            name = 'property-min-' ~ obProperty.id
                            id = 'property-min-' ~ obProperty.id
                            type = 'number'
                            value = arFilterValue[obProperty.id][0]
                        %}
                    </fieldset>
                    <fieldset>
                        <legend class="sr-only">{{ obProperty.filter_name }}&nbsp;{{ 'filter_max'|_ }}</legend>
                        {% partial 'form/input'
                            labelText = 'filter_max'|_
                            inputClasses = '_max appearance-none quantity_input'
                            name = 'property-max-' ~ obProperty.id
                            id = 'property-max-' ~ obProperty.id
                            type = 'number'
                            value = arFilterValue[obProperty.id][1]
                        %}
                    </fieldset>
                </div>
            {% elseif obProperty.filter_type == 'checkbox' %}
                {% set obPropertyValueList = obProperty.property_value.sort() %}
                <fieldset class="me-3 w-full">
                    <legend class="sr-only">{{ obProperty.filter_name }}</legend>
                    {% for obValue in obPropertyValueList %}
                        {% set bChecked = arFilterValue[obProperty.id] is not empty and obValue.slug in arFilterValue[obProperty.id] %}
                        {% set bDisabled = false %}
                        {% if bChecked == false and arFilterValueWithoutProperty[obProperty.id] is not empty %}
                            {% set obProductListTemp = obProductList.copy().filterByProperty(arFilterValueWithoutProperty[obProperty.id], obProductPropertyList).filterByProperty(arFilterValueWithoutProperty[obProperty.id], obOfferPropertyList) %}
                            {% set bDisabled = obValue.isDisabled(obProductListTemp) %}
                        {% endif %}
                        {% partial 'form/input-checkbox'
                            labelText = obValue.value
                            wrapperClasses = 'flex items-center mb-4'
                            inputClasses = 'rounded-sm disabled:opacity-20'
                            disabled = bDisabled
                            checked= bChecked
                            id = 'property-' ~ obProperty.id ~ '-' ~ obValue.slug
                            name = 'property-' ~ obProperty.id
                            value = obValue.slug
                        %}
                    {% endfor %}
                </fieldset>
            {% elseif obProperty.filter_type == 'select' %}
                {% set obPropertyValueList = obProperty.property_value.sort() %}
                {% set selectOptions = [] %}
                {% for obPropertyValue in obPropertyValueList %}
                    {% set selectOptions = selectOptions|merge([{value: obPropertyValue.slug, label: obPropertyValue.value}]) %}
                {% endfor %}
                {% partial 'form/select'
                    id = 'property-' ~ obProperty.id
                    name = 'property-' ~ obProperty.id
                    wrapperClasses = 'w-full'
                    placeholder='filter_value_choose'|_
                    options = selectOptions
                    selectedValue = arFilterValue[obProperty.id]
                %}
            {% elseif obProperty.filter_type == 'radio' %}
                <fieldset class="space-y-2">
                    {% set obPropertyValueList = obProperty.property_value.sort() %}
                    {% for obPropertyValue in obPropertyValueList %}
                        {% set bChecked = arFilterValue[obProperty.id] is not empty and obPropertyValue.slug == arFilterValue[obProperty.id] %}
                        {% partial 'form/input-radio'
                            id = 'property-' ~ obProperty.id ~ '-' ~ obPropertyValue.slug
                            name = 'property-' ~ obProperty.id
                            wrapperClasses = 'w-full'
                            value = obPropertyValue.slug
                            checked = bChecked
                            text = obPropertyValue.value
                        %}
                    {% endfor %}
                </fieldset>
            {% endif %}
        </div>
    </details>
    {% endif %}
{% endfor %}
